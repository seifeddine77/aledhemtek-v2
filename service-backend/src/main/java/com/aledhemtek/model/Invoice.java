package com.aledhemtek.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "invoice")
public class Invoice {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "invoice_number", unique = true, nullable = false)
    private String invoiceNumber;
    
    @Column(name = "issue_date", nullable = false)
    private LocalDateTime issueDate;
    
    @Column(name = "due_date")
    private LocalDateTime dueDate;
    
    @Column(name = "total_amount", nullable = false)
    private Double totalAmount;
    
    @Column(name = "amount_excl_tax")
    private Double amountExclTax;
    
    @Column(name = "tax_amount")
    private Double taxAmount;
    
    @Column(name = "tax_rate")
    private Double taxRate = 20.0; // 20% default
    
    @Enumerated(EnumType.STRING)
    @Column(name = "status")
    private InvoiceStatus status = InvoiceStatus.PENDING;
    
    @Column(name = "notes", columnDefinition = "TEXT")
    private String notes;
    
    @Column(name = "pdf_path")
    private String pdfPath;
    
    @Column(name = "email_sent")
    private Boolean emailSent = false;
    
    @Column(name = "email_sent_date")
    private LocalDateTime emailSentDate;
    
    @Column(name = "reminder_count")
    private Integer reminderCount = 0;
    
    @Column(name = "last_reminder_date")
    private LocalDateTime lastReminderDate;
    
    @Column(name = "auto_generated")
    private Boolean autoGenerated = false;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "reservation_id", nullable = true) // TEMPORARY: Allow null for test invoices
    @JsonIgnore
    private Reservation reservation;
    
    @OneToMany(mappedBy = "invoice", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonManagedReference
    private List<InvoiceItem> invoiceItems = new ArrayList<>();
    
    @OneToMany(mappedBy = "invoice", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonManagedReference
    private List<Payment> payments = new ArrayList<>();
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    // Enum for invoice status
    public enum InvoiceStatus {
        PENDING,
        SENT,
        PAID,
        CANCELLED,
        OVERDUE
    }
    
    // Constructors
    public Invoice() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }
    
    public Invoice(Reservation reservation) {
        this();
        this.reservation = reservation;
        this.issueDate = LocalDateTime.now();
        this.dueDate = LocalDateTime.now().plusDays(30); // 30 days default
    }
    
    // Utility methods
    @PreUpdate
    public void preUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
    
    /**
     * Calculate total amounts for the invoice
     */
    public void calculateAmounts() {
        this.amountExclTax = invoiceItems.stream()
                .mapToDouble(InvoiceItem::calculateTotal)
                .sum();
        this.taxAmount = this.amountExclTax * (this.taxRate / 100);
        this.totalAmount = this.amountExclTax + this.taxAmount;
    }
    
    /**
     * Generate unique invoice number
     */
    public void generateInvoiceNumber() {
        String year = String.valueOf(LocalDateTime.now().getYear());
        String month = String.format("%02d", LocalDateTime.now().getMonthValue());
        this.invoiceNumber = "INV-" + year + month + "-" + String.format("%06d", this.id);
    }
    
    /**
     * Check if invoice is paid
     */
    public boolean isPaid() {
        return this.status == InvoiceStatus.PAID;
    }
    
    /**
     * Calculate remaining amount to pay
     */
    public Double getRemainingAmount() {
        Double paidAmount = payments.stream()
                .filter(p -> p.getStatus() == Payment.PaymentStatus.VALIDATED)
                .mapToDouble(Payment::getAmount)
                .sum();
        return this.totalAmount - paidAmount;
    }
    
    /**
     * Check if invoice is overdue
     */
    public boolean isOverdue() {
        return this.dueDate != null && 
               LocalDateTime.now().isAfter(this.dueDate) && 
               !isPaid();
    }
    
    /**
     * Mark email as sent
     */
    public void markEmailSent() {
        this.emailSent = true;
        this.emailSentDate = LocalDateTime.now();
    }
    
    /**
     * Increment reminder count
     */
    public void incrementReminderCount() {
        this.reminderCount++;
        this.lastReminderDate = LocalDateTime.now();
    }
    
    /**
     * Check if reminder should be sent
     */
    public boolean shouldSendReminder() {
        if (!isOverdue()) return false;
        
        // Send first reminder 7 days after due date
        if (reminderCount == 0) {
            return LocalDateTime.now().isAfter(dueDate.plusDays(7));
        }
        
        // Send subsequent reminders every 15 days
        if (lastReminderDate != null) {
            return LocalDateTime.now().isAfter(lastReminderDate.plusDays(15));
        }
        
        return false;
    }
    
    /**
     * Get client name for JSON serialization
     */
    public String getClientName() {
        if (reservation != null && reservation.getClient() != null) {
            return reservation.getClient().getFirstName() + " " + reservation.getClient().getLastName();
        }
        return null;
    }
    
    /**
     * Get client email for JSON serialization
     */
    public String getClientEmail() {
        if (reservation != null && reservation.getClient() != null) {
            return reservation.getClient().getEmail();
        }
        return null;
    }
    
    /**
     * Get reservation ID for JSON serialization
     */
    public Long getReservationId() {
        if (reservation != null) {
            return reservation.getId();
        }
        return null;
    }
    
    // Getters and Setters
    public Long getId() {
        return id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    
    public String getInvoiceNumber() {
        return invoiceNumber;
    }
    
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
    }
    
    public LocalDateTime getIssueDate() {
        return issueDate;
    }
    
    public void setIssueDate(LocalDateTime issueDate) {
        this.issueDate = issueDate;
    }
    
    public LocalDateTime getDueDate() {
        return dueDate;
    }
    
    public void setDueDate(LocalDateTime dueDate) {
        this.dueDate = dueDate;
    }
    
    public Double getTotalAmount() {
        return totalAmount;
    }
    
    public void setTotalAmount(Double totalAmount) {
        this.totalAmount = totalAmount;
    }
    
    public Double getAmountExclTax() {
        return amountExclTax;
    }
    
    public void setAmountExclTax(Double amountExclTax) {
        this.amountExclTax = amountExclTax;
    }
    
    public Double getTaxAmount() {
        return taxAmount;
    }
    
    public void setTaxAmount(Double taxAmount) {
        this.taxAmount = taxAmount;
    }
    
    public Double getTaxRate() {
        return taxRate;
    }
    
    public void setTaxRate(Double taxRate) {
        this.taxRate = taxRate;
    }
    
    public InvoiceStatus getStatus() {
        return status;
    }
    
    public void setStatus(InvoiceStatus status) {
        this.status = status;
    }
    
    public String getNotes() {
        return notes;
    }
    
    public void setNotes(String notes) {
        this.notes = notes;
    }
    
    public String getPdfPath() {
        return pdfPath;
    }
    
    public void setPdfPath(String pdfPath) {
        this.pdfPath = pdfPath;
    }
    
    public Boolean getEmailSent() {
        return emailSent;
    }
    
    public void setEmailSent(Boolean emailSent) {
        this.emailSent = emailSent;
    }
    
    public LocalDateTime getEmailSentDate() {
        return emailSentDate;
    }
    
    public void setEmailSentDate(LocalDateTime emailSentDate) {
        this.emailSentDate = emailSentDate;
    }
    
    public Integer getReminderCount() {
        return reminderCount;
    }
    
    public void setReminderCount(Integer reminderCount) {
        this.reminderCount = reminderCount;
    }
    
    public LocalDateTime getLastReminderDate() {
        return lastReminderDate;
    }
    
    public void setLastReminderDate(LocalDateTime lastReminderDate) {
        this.lastReminderDate = lastReminderDate;
    }
    
    public Boolean getAutoGenerated() {
        return autoGenerated;
    }
    
    public void setAutoGenerated(Boolean autoGenerated) {
        this.autoGenerated = autoGenerated;
    }
    
    public Reservation getReservation() {
        return reservation;
    }
    
    public void setReservation(Reservation reservation) {
        this.reservation = reservation;
    }
    
    public List<InvoiceItem> getInvoiceItems() {
        return invoiceItems;
    }
    
    public void setInvoiceItems(List<InvoiceItem> invoiceItems) {
        this.invoiceItems = invoiceItems;
    }
    
    public List<Payment> getPayments() {
        return payments;
    }
    
    public void setPayments(List<Payment> payments) {
        this.payments = payments;
    }
    
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }
    
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }
    
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}
