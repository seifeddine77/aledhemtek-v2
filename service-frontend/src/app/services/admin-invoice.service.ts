import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface AdminInvoice {
  id: number;
  invoiceNumber: string;
  issueDate: string;
  dueDate: string;
  totalAmount: number;
  status: InvoiceStatus;
  emailSent: boolean;
  autoGenerated: boolean;
  clientName: string;
  clientEmail: string;
  reservationId?: number;
  itemsCount: number;
  remainingAmount: number;
}

export interface AdminInvoiceDetail extends AdminInvoice {
  amountExclTax: number;
  taxAmount: number;
  taxRate: number;
  notes?: string;
  emailSentDate?: string;
  createdAt: string;
  updatedAt: string;
  client?: {
    name: string;
    email: string;
    phone?: string;
  };
  items: InvoiceItem[];
  payments: Payment[];
}

export interface InvoiceItem {
  id: number;
  designation: string;
  description?: string;
  quantity: number;
  unitPrice: number;
  totalPrice: number;
  taxRate: number;
}

export interface Payment {
  id: number;
  amount: number;
  paymentMethod: string;
  status: string;
  paymentDate: string;
}

export enum InvoiceStatus {
  PENDING = 'PENDING',
  SENT = 'SENT',
  PAID = 'PAID',
  CANCELLED = 'CANCELLED',
  OVERDUE = 'OVERDUE'
}

export interface InvoiceStats {
  totalInvoices: number;
  pendingCount: number;
  sentCount: number;
  paidCount: number;
  cancelledCount: number;
  overdueCount: number;
  totalAmount: number;
  paidAmount: number;
  pendingAmount: number;
}

export interface InvoiceResponse {
  content: AdminInvoice[];
  totalElements: number;
  totalPages: number;
  currentPage: number;
  size: number;
}

@Injectable({
  providedIn: 'root'
})
export class AdminInvoiceService {
  private apiUrl = 'http://localhost:8080/api/admin/invoices';

  constructor(private http: HttpClient) {}

  /**
   * Get all invoices with pagination and filtering
   */
  getAllInvoices(
    page: number = 0,
    size: number = 10,
    sortBy: string = 'issueDate',
    sortDir: string = 'desc',
    status?: string,
    search?: string
  ): Observable<InvoiceResponse> {
    let params = new HttpParams()
      .set('page', page.toString())
      .set('size', size.toString())
      .set('sortBy', sortBy)
      .set('sortDir', sortDir);

    if (status) {
      params = params.set('status', status);
    }

    if (search) {
      params = params.set('search', search);
    }

    return this.http.get<InvoiceResponse>(this.apiUrl, { params });
  }

  /**
   * Get invoice by ID
   */
  getInvoiceById(id: number): Observable<AdminInvoiceDetail> {
    return this.http.get<AdminInvoiceDetail>(`${this.apiUrl}/${id}`);
  }

  /**
   * Update invoice status
   */
  updateInvoiceStatus(id: number, status: InvoiceStatus): Observable<any> {
    return this.http.put(`${this.apiUrl}/${id}/status`, { status: status.toString() });
  }

  /**
   * Download invoice PDF
   */
  downloadInvoicePDF(id: number): Observable<Blob> {
    return this.http.get(`${this.apiUrl}/${id}/pdf`, { 
      responseType: 'blob' 
    });
  }

  /**
   * Send invoice by email
   */
  sendInvoiceByEmail(id: number): Observable<any> {
    return this.http.post(`${this.apiUrl}/${id}/send-email`, {});
  }

  /**
   * Create invoice from reservation
   */
  createInvoiceFromReservation(reservationId: number): Observable<any> {
    return this.http.post(`${this.apiUrl}/create-from-reservation/${reservationId}`, {});
  }

  /**
   * Get invoice statistics
   */
  getInvoiceStats(): Observable<InvoiceStats> {
    return this.http.get<InvoiceStats>(`${this.apiUrl}/stats`);
  }

  /**
   * Get status display text in French
   */
  getStatusText(status: InvoiceStatus): string {
    switch (status) {
      case InvoiceStatus.PENDING:
        return 'En attente';
      case InvoiceStatus.SENT:
        return 'Envoyée';
      case InvoiceStatus.PAID:
        return 'Payée';
      case InvoiceStatus.CANCELLED:
        return 'Annulée';
      case InvoiceStatus.OVERDUE:
        return 'En retard';
      default:
        return status;
    }
  }

  /**
   * Get status color for UI
   */
  getStatusColor(status: InvoiceStatus): string {
    switch (status) {
      case InvoiceStatus.PENDING:
        return 'accent';
      case InvoiceStatus.SENT:
        return 'primary';
      case InvoiceStatus.PAID:
        return 'primary';
      case InvoiceStatus.CANCELLED:
        return 'warn';
      case InvoiceStatus.OVERDUE:
        return 'warn';
      default:
        return 'basic';
    }
  }

  /**
   * Format currency for display
   */
  formatCurrency(amount: number): string {
    return new Intl.NumberFormat('fr-FR', {
      style: 'currency',
      currency: 'EUR'
    }).format(amount);
  }

  /**
   * Format date for display
   */
  formatDate(dateString: string): string {
    if (!dateString) return '';
    return new Date(dateString).toLocaleDateString('fr-FR');
  }
}
